@using System;
@using System.Timers;
@using WebDevElin.Data

<div class="row">
    <div class="col" style="width:83vw">
        <RadzenChart>
            <RadzenAreaSeries Data="@CPULoad" CategoryProperty="Date" Title="CPU" ValueProperty="Value" RenderingOrder="1" StrokeWidth="50"/>
            <RadzenAreaSeries Data="@RAMLoad" CategoryProperty="Date" Title="RAM" ValueProperty="Value" />

            <RadzenCategoryAxis Padding="20" FormatString="{0:HH:mm:ss}" />
        </RadzenChart>
    </div>
</div>

@code {
  bool smooth = true;
  private Timer aTimer;
  DataItem[] CPULoad = new DataItem[] { };
  DataItem[] RAMLoad = new DataItem[] { };

  List<DataItem> CPUList = new List<DataItem>();
  List<DataItem> RAMList = new List<DataItem>();

  protected override void OnInitialized()
  {
      SetTimer();
  }

  private void SetTimer()
  {
      aTimer = new Timer(3000);
      aTimer.Elapsed += OnTimedEvent;
      aTimer.AutoReset = true;
      aTimer.Enabled = true;
  }

  private async void OnTimedEvent(Object source, ElapsedEventArgs e)
  {
      CPUList.Add(new DataItem { Date = DateTime.Now, Value = WebDevElin.Data.DiagnosticInfo.GetCPULoad() });
      RAMList.Add(new DataItem { Date = DateTime.Now, Value = WebDevElin.Data.DiagnosticInfo.GetRAMLoad() });
      if (CPUList.Count > 500)
      {
          CPUList = CPUList.Skip(1).ToList();
          CPULoad = CPUList.ToArray();
      }
      else CPULoad = CPUList.ToArray();
      if (RAMList.Count > 500)
      {
          RAMList = RAMList.Skip(1).ToList();
          RAMLoad = RAMList.ToArray();
      }
      else RAMLoad = RAMList.ToArray();
      await InvokeAsync(() => StateHasChanged());
  }
}